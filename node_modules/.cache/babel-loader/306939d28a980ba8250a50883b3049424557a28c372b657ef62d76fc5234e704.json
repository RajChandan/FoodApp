{"ast":null,"code":"var _jsxFileName = \"B:\\\\work\\\\React\\\\FoodApp\\\\src\\\\store\\\\CartProvider.js\",\n  _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    console.log(action.item, \" ---- action item\");\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: parseInt(existingCartItem.amount) + parseInt(action.item.amount)\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n    console.log(updatedItems, \" updated items\");\n    const updatedTotalAmount = parseInt(state.totalAmount) + parseInt(action.item.price) * parseInt(action.item.amount);\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  if (action.type === \"REMOVE\") {\n    console.log(action.item, \" ---- action item removal\");\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = parseInt(state.totalAmount) - parseInt(existingItem.amount);\n    let updatedItems;\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter();\n    } else {}\n  }\n  return defaultCartState;\n};\nconst CartProvider = props => {\n  _s();\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","console","log","item","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","amount","parseInt","concat","updatedTotalAmount","price","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"sources":["B:/work/React/FoodApp/src/store/CartProvider.js"],"sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = { items: [], totalAmount: 0 };\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    console.log(action.item, \" ---- action item\");\r\n\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    let updatedItems;\r\n    if (existingCartItem) {\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount:\r\n          parseInt(existingCartItem.amount) + parseInt(action.item.amount),\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n\r\n    console.log(updatedItems, \" updated items\");\r\n    const updatedTotalAmount =\r\n      parseInt(state.totalAmount) +\r\n      parseInt(action.item.price) * parseInt(action.item.amount);\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  if (action.type === \"REMOVE\") {\r\n    console.log(action.item, \" ---- action item removal\");\r\n\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.id\r\n    );\r\n    const existingItem = state.items[existingCartItemIndex];\r\n    const updatedTotalAmount =\r\n      parseInt(state.totalAmount) - parseInt(existingItem.amount);\r\n    let updatedItems;\r\n    if (existingItem.amount === 1) {\r\n      updatedItems = state.items.filter();\r\n    } else {\r\n    }\r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}